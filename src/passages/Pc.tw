:: pc {"position":"400,0"}
==>
[[inventory->inventory]]
<==
#a fucking old and slow pc
{
    <img src="../src/images/pc.png"/>
    |terminal>[<div class="terminal-container"></div>]
    |powerButton>[<div id="power"></dic>]
    (set: _isTerminalHidden to false)
    (click-rerun:?powerButton)
    [
        (if: _isTerminalHidden) [
            (show: ?terminal)
            (set: _isTerminalHidden to false)
        ] (else:) [
            (hide: ?terminal)
            (set: _isTerminalHidden to true)
        ]
            
    ]
}
{
(set: $insertedItem to $usedItem)
(set: $cdContent to (a:
    (dm: "name", "RSA_file.key", "content", "d=7085071307; n=7085811221"),
    (dm: "name", "RSA_file.enc", "content", "51191029 2221684278 1235109347 5932720573 5722816980 407222931 1597934719 6297126078 7002519417"),
    (dm: "name", "RSA_file.info", "content", "RSA file.enc contains and array with multiple RSA encrypted characters."),
    (dm: "name", "OTP_file.data", "content", "..."),
    (dm: "name", "file", "content", "...")))
(set: $path to "~/")
You are sitting in front of a really old looking PC, it smells slithly, but you keep ignoring it.
}
<!-- |cdContent)[(for: each _item, ..._cdContent)[-rw-------    1 Thomas  staff      25 18 Okt 22:01 _item<br>]]
$name:~(text-style: "blink")[$]  <div id="input-line" style="display:inline;"></div> -->
<!--The variable '$usedItem' contains the item the user clicked on. Set it always to  0, if you dont use it, to avoid missunderstandings in other passages. -->
{(unless: $usedItem is 0)[\
(set: $path to "~/"+$usedItem's name)
\(if: $usedItem's name is  is "USB Stick") [\
\You fiddle around with the USB stick on the PC case. After you have turned the stick three times, it finally fits in.
\]
\(else-if: $usedItem's name is "CD") [\
    The CD looks pretty scratched...(show: ?cdContent)
    (t8n: "slide-left")+(t8n-delay:3s)[\
        ($theItGuy: "Try the open command on some of the files... retard...", "dudeOpenPromt")\
        ]\
    ]\
\(else: )[Nice idea, but you'd probably have similar success with a banana.]
\]
(set: $usedItem to 0)\
}
{
[<div class="bubble bubble-bottom-left" contenteditable>Yo dude I don't remember exactly where I left it, but you need a USB stick.</div>
<img class="dude" src="../src/images/The IT Guy.png" height="200" left="100" />[(unless: visits > 2)[(hide:?dude)]]](dude|


(set: $testVariable to 12)
}
<script>
function sleep(milliseconds) {
 return new Promise(resolve => setTimeout(resolve, milliseconds));
}

async function loading(term, n, delay ) {
    for (let i = 0; i < n; i++) {
            term.echo(".", {newline: false});
            await sleep(delay);
    }
}


var term = $('.terminal-container').terminal({
    te: function (user) {
        this.echo('Hello ' + user);
    },
    help: function () {
        this.echo('Here is a list of available commands:');
        this.echo('')
        this.echo(' ls - List directory content');
        this.echo(' cat - Show file content');
        this.echo(' connect - Connect to your predecessor\'s server');
    },
    connect: async function () {
        this.echo('Trying to connect to OLD-SERVER ...');
        //await loading(this,25,200);
        term.clear();
        this.echo('CONNECTED\n');

        // Shared prime
        var p = 23;
        // Shared generator
        var g = 12;
        
        //Servers secret
        var v = 8;
        //Servers 
        var b = Math.pow(g,v) % p;


        await term.echo("Welcome, glad to have you back! Your last login is 242 days ago. Therefor we have to agree on a new shared secret. " +
        "Don\'t worry though, I\'ll guide you through the process! But first we have to agree on a prime number P and a natural number G. "+
        "I'll pick these for us. Trust me on this!", {typing: true, delay: 100, finalize: function(div) { } });


        term.echo("\n\n")
        await term.echo('I picked '+ p + ' as our prime number and ' + g + ' as our natural number. Don\'t forget these!', {typing: true, delay: 100 });
        term.echo("\n\n")
        await term.echo('Now, try to think about a number smaller than ' + p + ". Let's call it u! Keep this number to yourself and don't tell anyone!", {typing: true, delay: 100 });
        await term.echo('I need you to find a pen and paper now and calculate the following term.', {typing: true, delay: 100 });

        term.echo("<math><mrow><mi>a</mi> <mo>=</mo> <msup><mi>g</mi><mi>u</mi></msup> <mo>mod</mo> <mi>p</mi></mrow></math>", {raw: true});
        term.echo("<math> <mo>&#x21d2;</mo> <mrow><mi>a</mi> <mo>=</mo> <msup><mi>"+g+"</mi><mi>u</mi></msup> <mo>mod</mo> <mi>"+p+"</mi></mrow> </math>", {raw: true});
        await term.echo('Remember, p='+p+' and g='+g+'! Just use your secret number u. Easy!', {typing: true, delay: 100 });

        term.echo("\n\n")
        await term.echo('While you did your number crunching, I was also doing a calculation. My value for b='+b+'! Keep it in mind, you\'ll need it!', {typing: true, delay: 100 });

        term.read('Please tell me, a=').then(async function(string) {
            console.log(string)
            await term.echo('We\'re half way there, but I need you to do one last calculation.', {typing: true, delay: 100 });
            term.echo("<math><mrow><mi>k</mi> <mo>=</mo> <msup><mi>b</mi><mi>u</mi></msup> <mo>mod</mo> <mi>p</mi></mrow></math>", {raw: true});
            await term.echo('b='+b+' p='+p+' and u was your secret number', {typing: true, delay: 100 });
            await term.echo('I was also able to calculate the value of k with my the number you told me. This will be our shared secret from now on!', {typing: true, delay: 100 });
        });
    

    },
    cat: cat(),
    ls: ls(),
    mount: mount(),
    verify: verify(),
    //decrypt: decrypt(),
    openssl: function (command, ...args) {
        //var args = Array.from(arguments);
        var options = $.terminal.parse_options(args);

        console.log(options);
        console.log(command);
        if (command == "rsautl") {
            if (!options.decrypt || !options.encrypt) {
                this.error("Specify decrypt or encrypt.");
            } else if (options.inkey || options.in) {
                this.error("no keyfile specified\nunable to load Private Key");
            }

            const p = 191n;
            const q = 223n;
            const n = p * q;
            const phi = (p - 1n) * (q - 1n);
            const e = 47n;

            
        }


    }
}, {
    greetings: 'Hello ' + $name + ', type help to get a list of available commands! ',
    prompt() {
        return `┌──(${color('green', $name + "@oldPC")})-[${color('blue', $path)}]
└─\$ `;
    },
    checkArity: false
});


function color(name, string) {
    var colors = {
        blue: '#55f',
        green: '#4d4',
        grey: '#999',
        red: '#A00',
        yellow: '#FF5',
        violet: '#a320ce',
        white: '#fff'
    }
    if (colors[name]) {
        return '[[;' + colors[name] + ';]' + string + ']';
    } else {
        return string;
    }
}
</script>
<style>

math {
    font-size: 25px;
}

.terminal-container {
    height: 271pt;
    overflow-y: scroll;
    width: 364pt;
    top: -470pt;
    left: 192pt;
    border-radius: 11pt;
    position: absolute;
}

#power {
    height: 30pt;
    width: 30pt;
    position: absolute;
    top: -135pt;
    left: 499pt;
}
</style>

[[back to the lab->lab]]

<!--
(set: $toggleOnKeyDown to 0)
<script>
var keyDown = function(evt) {
    var div = $('#input-line');

    evt = evt || window.event;
    var charCode = evt.which || evt.keyCode;
    //alert(charCode);
    if (charCode == 8) {
        div.text(div.text().slice(0, -1));
        return;
    }
    if (charCode == 13) {
        // enter
        var text = div.text();
        var cmds = text.split(" ");
        div.text("");
        return;
    }
    var charStr = String.fromCharCode(charCode);
    div.text(div.text() + charStr);
};
window.onkeydown = keyDown;
</script>
-->
